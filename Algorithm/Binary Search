'''
Given an array of integers nums which is sorted in ascending order, 
and an integer target, write a function to search target in nums. If target exists, 
then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.
'''
# first try : use dictionary
# Runtime : 696 ms,Memory Usage : 15.8MB
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        d = {num:idx for idx,num in enumerate(nums)}
        if target in d:
            return d[target]
        return -1
       
 # second try : use binary search
 # Runtime : 762 ms,Memory Usage : 15.6MB
 # 先以排序後列表的中間點與target值比較大小，若target較大則往右尋找、反之亦然。
 # 都找不到目標時，回傳-1表示無此目標
 class Solution:
    def search(self, nums: List[int], target: int) -> int:
        low = 0
        high = len(nums)-1
        
        while low <= high:
            mid = (high+low)//2

            if nums[mid] < target :
                low = mid+1
                
            elif nums[mid] > target :
                high = mid-1
                
            else :
                return mid
        return -1
        
 # third try : bisect module
 # Runtime : 332 ms,Memory Usage : 15.4MB
 # 以內建的二分法套件做搜尋，達到最快、最省空間的效果
 class Solution:
    def search(self, nums, target):
        index = bisect.bisect_left(nums, target)
        return index if index < len(nums) and nums[index] == target else -1
