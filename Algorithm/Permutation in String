'''
567. Permutation in String

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
'''

# first version
# Runtime 6340 ms, Memory 13.9MB
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        for head in range(len(s2)-len(s1)+1):  
            if Counter(s2[head:head+len(s1)]) == Counter(s1):
                return bool(1)
            else:
                continue
        return bool(0)
        
# second version
# Runtime 232 ms, Memory 13.8MB
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        # 建立檢查清單
        check_list = Counter(s1)
        # window長度
        w = len(s1) 
        # 對s2的元素依序檢查是否在清單內
        for i in range(len(s2)):
            if s2[i] in check_list:
                check_list[s2[i]]-=1
            # 當已到下一個window，將上一window扣除的部分復原
            if i>=w and s2[i-w] in check_list:
                check_list[s2[i-w]]+=1
            # 當check_list都檢查完畢->True
            if all([check_list[i]==0 for i in check_list]):
                return True
        return False

            
  

