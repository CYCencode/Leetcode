'''
567. Permutation in String

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
'''

# first version
# Runtime 6340 ms, Memory 13.9MB
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        for head in range(len(s2)-len(s1)+1):  
            if Counter(s2[head:head+len(s1)]) == Counter(s1):
                return bool(1)
            else:
                continue
        return bool(0)
        
# second version
# Runtime 232 ms, Memory 13.8MB
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        # 將計算範圍框在較小的範圍(用減法少去一層計算量)
        s1_counter, s1_len = Counter(s1), len(s1)
        for idx in range(len(s2)):
            # 若存在一樣的元素，消除一個
            if s2[idx] in s1_counter:
               s1_counter[s2[idx]]-=1
            # 依序檢查???
            if (idx>=s1_len) and (s2[idx-s1_len] in s1_counter):
               s1_counter[s2[idx-s1_len]]+=1
            # 若最終為平衡則true
            if all()
            
            
  '''
  cntr, w = Counter(s1), len(s1)   

        for i in range(len(s2)):
            if s2[i] in cntr: 
                cntr[s2[i]] -= 1
            if i >= w and s2[i-w] in cntr: 
                cntr[s2[i-w]] += 1

            if all([cntr[i] == 0 for i in cntr]): # see optimized code below
                return True

        return False
  
    '''
