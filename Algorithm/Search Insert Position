'''
35. Search Insert Position
Given a sorted array of distinct integers and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.
'''
# use list comprehension
# Runtime : 96 ms, Memory Usage	: 14.7 MB
# easy to read but not most efficient
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """       
        # 找出小於target的元素數量，即表示要安置的位置
        return len([x for x in nums if x<target])
        
# binary serach
# 找出target開始比較小的門檻值
# Runtime : 114 ms, Memory Usage	: 14.7 MB
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        low = 0
        high = len(nums)
        while low<high:
            mid = (high+low)//2
            # 若target較大，門檻區間上升
            if target>nums[mid]:
                low = mid+1
            else:
                high = mid
        return low
